package se.mithlond.services.content.model.articles;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import se.mithlond.services.content.model.Patterns;

import javax.xml.bind.ValidationEventHandler;
import javax.xml.bind.annotation.DomHandler;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.StringReader;
import java.io.StringWriter;

/**
 * A DomHandler to ensure that markup is sent verbatim.
 *
 * @author <a href="mailto:lj@jguru.se">Lennart J&ouml;relid</a>, jGuru Europe AB
 */
@XmlTransient
public class MarkupDomAdapter implements DomHandler<String, StreamResult> {

    // Our Logger
    private static final Logger log = LoggerFactory.getLogger(MarkupDomAdapter.class);

    /**
     * Element start of the transmitted markup.
     */
    public static final String MARKUP_START = "<markup xmlns=\"" + Patterns.NAMESPACE + "\">";

    /**
     * Element end of the transmitted markup.
     */
    public static final String MARKUP_END = "</markup>";

    // Internal state
    private StringWriter writer = new StringWriter();

    /**
     *{@inheritDoc}
     */
    @Override
    public StreamResult createUnmarshaller(final ValidationEventHandler errorHandler) {
        return new StreamResult(writer);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getElement(final StreamResult rt) {

        // We assume that the markup data retrieved in the StreamResult
        // has the form <markup>...</markup>, as it has hopefully been
        // generated by this MarkupDomAdapter.
        final String data = rt.getWriter().toString();

        if(log.isDebugEnabled()) {
            log.debug("Unmarshalling: " + data);
        }

        final int startIndex = data.indexOf(MARKUP_START) + MARKUP_START.length();
        final int endIndex = data.lastIndexOf(MARKUP_END);

        // All done.
        return data.substring(startIndex, endIndex);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Source marshal(final String markupToMarshal, final ValidationEventHandler errorHandler) {
        try {
            final String xml = MARKUP_START + markupToMarshal.trim() + MARKUP_END;

            if(log.isDebugEnabled()) {
                log.debug("Marshalling: " + xml);
            }

            return new StreamSource(new StringReader(xml));
        } catch(Exception e) {
            throw new RuntimeException(e);
        }
    }
}
